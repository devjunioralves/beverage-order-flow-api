version: '3.8'

services:
  api1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PORT=3001
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: always

  api2:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PORT=3002
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend
    restart: always

  nginx:
    image: nginx
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api1
      - api2
    networks:
      - backend

  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: resale_db
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - '5672:5672'
      - '15672:15672'
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'rabbitmqctl', 'status']
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - backend

  grafana:
    image: grafana/grafana
    ports:
      - '3001:3000'
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - backend

  redis:
    image: redis:alpine
    restart: always
    ports:
      - '6379:6379'
    networks:
      - backend
  k6:
    image: grafana/k6
    volumes:
      - ./load-test.js:/scripts/load-test.js:ro
    networks:
      - backend
    depends_on:
      - nginx
    entrypoint: ['k6', 'run', '/scripts/load-test.js']

networks:
  backend:

volumes:
  postgres_data:
